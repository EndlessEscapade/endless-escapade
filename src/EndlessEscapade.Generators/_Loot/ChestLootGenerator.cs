using System.IO;
using System.Text;
using Hjson;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;

namespace EndlessEscapade.Generators;

[Generator(LanguageNames.CSharp)]
public sealed class ChestLootGenerator : IIncrementalGenerator
{
    private const string ToolVersion = "0.1";

    /// <summary>
    ///     The file extension associated with this generator.
    /// </summary>
    public const string Extension = ".eeloot";

    public void Initialize(IncrementalGeneratorInitializationContext initializationContext) {
        var files = initializationContext.AdditionalTextsProvider.Where(file => file.Path.EndsWith(Extension));

        var contents = files.Select(
            static (text, token) => {
                var content = text.GetText(token);

                var json = HjsonValue.Parse(content.ToString()).ToString(Stringify.Plain);
                var data = JsonConvert.DeserializeObject<ChestLootData>(json);

                return (
                    Name: Path.GetFileNameWithoutExtension(text.Path),
                    Data: data
                );
            }
        );

        initializationContext.RegisterSourceOutput(
            contents,
            static (sourceContext, content) => {
                sourceContext.AddSource($"{content.Name}.g.cs", GenerateChestLoot(content.Name, content.Data));
            }
        );
    }

    private static string GenerateChestLoot(string name, ChestLootData data) {
        return $@" // <auto-generated/>

namespace EndlessEscapade.Common.World;

[System.CodeDom.Compiler.GeneratedCodeAttribute(""EndlessEscapade.Generators.ChestLootGenerator"", ""{ToolVersion}"")]
public sealed class {name} : IChestLoot
{{
    public string ItemPath {{ get; }} = ""{data.ItemPath}"";

    public string TilePath {{ get; }} = ""{data.TilePath}"";

    public int Chance {{ get; }} = {data.Chance};

    public int[] Frames {{ get; }} = {data.Frames.ToStringArray()};

    public int MinStack {{ get; }} = {data.MinStack};

    public int MaxStack {{ get; }} = {data.MaxStack};

    public bool RandomSlot {{ get; }} = {data.RandomSlot.ToString().ToLower()};
}}";
    }
}
