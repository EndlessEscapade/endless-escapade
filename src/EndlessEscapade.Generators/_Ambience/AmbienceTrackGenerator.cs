using System.IO;
using System.Text;
using Hjson;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;

namespace EndlessEscapade.Generators;

[Generator(LanguageNames.CSharp)]
public sealed class AmbienceTrackGenerator : IIncrementalGenerator
{
    private const string ToolVersion = "0.1";

    /// <summary>
    ///     The file extension associated with this generator.
    /// </summary>
    public const string Extension = ".ambience.track";

    public void Initialize(IncrementalGeneratorInitializationContext initializationContext) {
        var files = initializationContext.AdditionalTextsProvider.Where(file => file.Path.EndsWith(Extension));

        var contents = files.Select(
            static (text, token) => {
                var content = text.GetText(token);

                var json = HjsonValue.Parse(content.ToString()).ToString(Stringify.Plain);
                var data = JsonConvert.DeserializeObject<AmbienceTrackData>(json);

                return (
                    Name: Path.GetFileNameWithoutExtension(text.Path),
                    Data: data
                );
            }
        );

        initializationContext.RegisterSourceOutput(
            contents,
            static (sourceContext, content) => {
                var name = content.Name.Split('.')[0];

                sourceContext.AddSource($"{name}.g.cs", GenerateAmbienceTrack(name, content.Data));
            }
        );
    }

    private static string GenerateAmbienceTrack(string name, AmbienceTrackData data) {
        var builder = new StringBuilder(2 + data.Signals.Length * 8);

        builder.Append('[');

        for (var i = 0; i < data.Signals.Length; i++) {
            if (i != 0) {
                builder.Append(", ");
            }

            builder.Append('"').Append(data.Signals[i]).Append('"');
        }

        builder.Append(']');

        return $@" // <auto-generated/>

using Terraria.Audio;
using ReLogic.Utilities;

namespace EndlessEscapade.Common.Ambience;

[System.CodeDom.Compiler.GeneratedCodeAttribute(""EndlessEscapade.Generators.AmbienceTrackGenerator"", ""{ToolVersion}"")]
public sealed class {name} : IAmbienceTrack
{{
	public SoundStyle Sound {{ get; }} = new(""{data.SoundPath}"", SoundType.Ambient) {{
		Volume = 0.8f,
		IsLooped = true
	}};

	public string[] Signals {{ get; }} = {builder};

	public float StepIn {{ get; }} = {data.StepIn}f;

	public float StepOut {{ get; }} = {data.StepOut}f;

	public float Volume {{
		get => _volume;
		set => _volume = MathHelper.Clamp(value, 0f, 1f);
	}}

	private float _volume;

	public SlotId Slot {{ get; set; }}
}}";
    }
}
